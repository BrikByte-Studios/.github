name: Reuse - Container Build & Push

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        required: true
        description: "Image/repo name (e.g. sample-service)"
      registry:
        type: string
        default: "ghcr.io"
        description: "Registry hostname (ghcr.io|â€¦)"
      build-context:
        type: string
        default: "."
      dockerfile:
        type: string
        default: "Dockerfile"
      tags:
        type: string
        default: "latest" # comma-separated list supported by buildx
    secrets:
      registry_username:
        required: false
      registry_password:
        required: false

jobs:
  container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ${{ inputs.registry }}
      OWNER_LC: ${{ toLower(github.repository_owner) }}
      IMAGE_LC: ${{ toLower(inputs['image-name']) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # Login for GHCR using GITHUB_TOKEN
      - name: Login (GHCR)
        if: ${{ env.REGISTRY == 'ghcr.io' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login for custom registry
      - name: Login (custom registry)
        if: ${{ env.REGISTRY != 'ghcr.io' }}
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REG_USER: ${{ secrets.registry_username }}
          REG_PASS: ${{ secrets.registry_password }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${REG_USER:-}" ] && [ -n "${REG_PASS:-}" ]; then
            echo "Logging into ${REGISTRY}"
            echo "${REG_PASS}" | docker login "${REGISTRY}" -u "${REG_USER}" --password-stdin
          else
            echo "No custom registry credentials provided; skipping login."
          fi

      # Normalize tags (lowercase, trim, split commas -> newline)
      - name: Normalize tags
        id: norm
        shell: bash
        env:
          INPUT_TAGS: ${{ inputs.tags }}
        run: |
          set -euo pipefail
          T="$(printf '%s' "${INPUT_TAGS}" | tr '[:upper:]' '[:lower:]')"
          # split comma-separated into newline list & trim blanks
          T="$(printf '%s' "${T}" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed '/^$/d')"
          echo "list<<EOF" >> "$GITHUB_OUTPUT"
          echo "${T}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs['build-context'] }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_LC }}:${{ steps.norm.outputs.list }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_LC }}:cache
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_LC }}:cache,mode=max
          provenance: true
