name: Reuse • Test, Integration, Coverage

on:
  workflow_call:
    inputs:
      language:
        type: string
        required: true
        description: "Runtime stack: node | python | java"
      coverage-threshold:
        type: string
        required: false
        default: "0"
        description: "Optional minimum coverage % to enforce (e.g. '80')"
      run-integration:
        type: boolean
        required: false
        default: true
        description: "Run integration tests (in addition to unit tests) if present"
      run-security:
        type: boolean
        required: false
        default: true
        description: "Reserved: run security scan after tests (soft fail in v1)"
    secrets:
      token:
        required: false
        description: "Optional PAT for private feeds / scanners"

jobs:
  test-and-cover:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write   # reserved for SARIF upload later
      actions: read

    steps:
      # -------------------------------------------------
      # 0. Context
      #
      # This workflow:
      #   - Lints
      #   - Runs unit + integration tests
      #   - Generates coverage
      #   - Optionally runs a (placeholder) security scan
      #   - Uploads coverage artifacts
      #
      # It does NOT build or deploy. That happens in ci-build.yml / ci-deploy.yml.
      #
      # IMPORTANT:
      # We did NOT change the workflow_call interface compared to v1.
      # Callers in service repos can keep doing:
      #
      #   uses: brikbytes/.github/.github/workflows/ci-test.yml@v1
      #   with:
      #     language: node
      #     run-integration: true
      #     coverage-threshold: "80"
      #     run-security: true
      #
      # That keeps this workflow compatible with the new artifact+cache scheme
      # introduced in PIPE-CICD-BUILD-002.
      # -------------------------------------------------

      # -------------------------------------------------
      # 1. Checkout source
      # -------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------------
      # 2. Setup toolchain for the selected language
      # -------------------------------------------------
      - name: Setup Node
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Java / Maven
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # -------------------------------------------------
      # 3. Restore dependency cache
      #    Uses same hashFiles logic as ci-build.yml.
      #    This keeps warm test runs fast, aligned with PIPE-CICD-BUILD-002.
      # -------------------------------------------------
      - name: Cache deps
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.cache/pip
            ~/.m2/repository
          key: ${{ runner.os }}-${{ inputs.language }}-${{ hashFiles('**/package-lock.json','**/pnpm-lock.yaml','**/requirements*.txt','**/poetry.lock','**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.language }}-
            ${{ runner.os }}-

      # -------------------------------------------------
      # 4. Install dev/test dependencies
      #    We explicitly install linters, coverage libs, pytest, etc.
      # -------------------------------------------------
      - name: Install deps (Node)
        if: ${{ inputs.language == 'node' }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm i --package-lock-only --no-audit --no-fund
            npm ci --no-audit --no-fund
          fi

      - name: Install deps (Python)
        if: ${{ inputs.language == 'python' }}
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # dev/test extras (pytest, coverage, etc.)
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest coverage pytest-cov || true
          fi

      - name: Install deps (Java)
        if: ${{ inputs.language == 'java' }}
        shell: bash
        run: |
          set -euo pipefail
          mvn -q -B dependency:resolve

      # -------------------------------------------------
      # 5. Lint / static style checks
      #    Fail closed on obvious style violations.
      #    Node: eslint / prettier:check if available
      #    Python: flake8 / black --check / isort --check-only if available
      #    Java: checkstyle or similar (soft fail note in echo)
      # -------------------------------------------------
      - name: Lint (Node)
        if: ${{ inputs.language == 'node' }}
        shell: bash
        run: |
          set -euo pipefail
          if npm run | grep -q "lint"; then
            npm run lint
          fi
          if npm run | grep -q "format:check"; then
            npm run format:check
          fi

      - name: Lint (Python)
        if: ${{ inputs.language == 'python' }}
        shell: bash
        run: |
          set -euo pipefail
          if command -v flake8 >/dev/null 2>&1; then
            flake8 .
          fi
          if command -v black >/dev/null 2>&1; then
            black --check .
          fi
          if command -v isort >/dev/null 2>&1; then
            isort --check-only .
          fi

      - name: Lint (Java)
        if: ${{ inputs.language == 'java' }}
        shell: bash
        run: |
          set -euo pipefail
          # We’re not hard-failing if checkstyle isn't configured yet.
          if mvn -q -B -DskipTests=true checkstyle:checkstyle; then
            echo "checkstyle ran"
          else
            echo "checkstyle not configured or failed; this can be hardened later."
          fi

      # -------------------------------------------------
      # 6. Run unit + integration tests with coverage
      #
      # We:
      #   - run unit tests
      #   - run integration tests if run-integration=true
      #   - generate coverage (jest/vitest, pytest-cov, jacoco)
      #
      # NOTE: we do NOT assume container image here.
      # The image from ci-build is used later in deploy + security, not for test blocking.
      # -------------------------------------------------

      - name: Test & Coverage (Node)
        if: ${{ inputs.language == 'node' }}
        shell: bash
        run: |
          set -euo pipefail

          has_script() {
            npm run | grep -q "^[[:space:]]*$1[[:space:]]"
          }

          run_with_cov_if_possible() {
            script_name="$1"
            if has_script "$script_name"; then
              body=$(npm pkg get scripts."$script_name" | sed 's/^"//;s/"$//')
              if echo "$body" | grep -qiE 'jest|vitest'; then
                echo "→ running $script_name with coverage"
                npm run "$script_name" -- --coverage
              else
                echo "→ running $script_name without explicit --coverage"
                npm run "$script_name"
              fi
            else
              echo "→ no $script_name script; skipping"
            fi
          }

          echo "=== unit tests ==="
          run_with_cov_if_possible test

          echo "=== integration tests ==="
          if [ "${{ inputs.run-integration }}" = "true" ]; then
            run_with_cov_if_possible test:integration
          else
            echo "integration disabled (run-integration=false)"
          fi

      - name: Test & Coverage (Python)
        if: ${{ inputs.language == 'python' }}
        shell: bash
        run: |
          set -euo pipefail
          if command -v pytest >/dev/null 2>&1; then
            # unit tests -> coverage.xml produced
            pytest --maxfail=1 --disable-warnings --cov=./ --cov-report=xml

            # integration tests (pytest -m integration)
            if [ "${{ inputs.run-integration }}" = "true" ]; then
              pytest -m "integration" --maxfail=1 --disable-warnings --cov=./ --cov-append --cov-report=xml || true
            fi
          else
            echo "pytest not found; skipping tests."
          fi

      - name: Test & Coverage (Java)
        if: ${{ inputs.language == 'java' }}
        shell: bash
        run: |
          set -euo pipefail
          # Unit tests + Jacoco coverage
          mvn -q -B test jacoco:report

          # Integration tests via failsafe (verify phase)
          if [ "${{ inputs.run-integration }}" = "true" ]; then
            mvn -q -B verify || true
          fi

      # -------------------------------------------------
      # 7. Enforce coverage threshold (soft gate)
      #    We'll tighten this centrally in a later hardening task.
      # -------------------------------------------------
      - name: Check coverage threshold
        if: ${{ inputs.coverage-threshold != '0' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Minimum coverage required: ${{ inputs.coverage-threshold }}%"
          echo "TODO: parse coverage.xml / jacoco.xml / lcov and fail if below threshold."
          echo "For BrikByteOS v1 this is advisory only."

      # -------------------------------------------------
      # 8. Upload coverage artifacts
      #    This feeds observability / compliance / dashboards.
      # -------------------------------------------------
      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage*
            coverage/**
            coverage.xml
            .coverage
            junit.xml
            target/surefire-reports/**
            target/failsafe-reports/**
            target/site/jacoco/**
          if-no-files-found: ignore

      # -------------------------------------------------
      # 9. Security scan placeholder / prep
      #
      #   In PIPE-CICD-BUILD-002 we don't block on container vuln scan yet,
      #   but we DO prep for it:
      #     - If available in this workflow run context, pull down
      #       service-container-image (the tar produced by ci-build)
      #       so we could 'docker load' and scan it here.
      #
      #   This keeps the interface stable: callers don't change.
      #   We can flip "WARN" -> "FAIL" in a central update later.
      # -------------------------------------------------
      - name: Download built image (optional for scan)
        if: ${{ inputs.run-security }}
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: service-container-image
          path: ./ci_image

      - name: Security scan (soft gate)
        if: ${{ inputs.run-security }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[SECURITY] placeholder scan hook"
          if [ -f ./ci_image/image.tar ]; then
            echo "Found image.tar from ci-build (good)."
            echo "Future: docker load && trivy fs / image && upload SARIF."
          else
            echo "No image.tar available in this job context."
          fi
          echo "In v1 this does NOT fail the pipeline."